/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.foobar2000.api;

public class bit_array_not extends bit_array {
  private long swigCPtr;

  public bit_array_not(long cPtr, boolean cMemoryOwn) {
    super(foobarJNI.SWIGbit_array_notUpcast(cPtr), cMemoryOwn);
    swigCPtr = cPtr;
  }

  protected static long getCPtr(bit_array_not obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      foobarJNI.delete_bit_array_not(swigCPtr);
    }
    swigCPtr = 0;
    super.delete();
  }

  public bit_array_not(bit_array p_a1) {
    this(foobarJNI.new_bit_array_not(bit_array.getCPtr(p_a1), p_a1), true);
  }

  public boolean get(long n) {
    return foobarJNI.bit_array_not_get(swigCPtr, this, n);
  }

  public long find(boolean val, long start, SWIGTYPE_p_t_ssize count) {
    return foobarJNI.bit_array_not_find(swigCPtr, this, val, start, SWIGTYPE_p_t_ssize.getCPtr(count));
  }

}
