/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.foobar2000.api;

public class metadb_handle {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public metadb_handle(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(metadb_handle obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
  }

  public void metadb_lock() {
    foobarJNI.metadb_handle_metadb_lock(swigCPtr, this);
  }

  public void metadb_unlock() {
    foobarJNI.metadb_handle_metadb_unlock(swigCPtr, this);
  }

  public t_filestats get_filestats() {
    return new t_filestats(foobarJNI.metadb_handle_get_filestats(swigCPtr, this), true);
  }

  public boolean is_info_loaded() {
    return foobarJNI.metadb_handle_is_info_loaded(swigCPtr, this);
  }

  public boolean get_info(file_info p_info) {
    return foobarJNI.metadb_handle_get_info(swigCPtr, this, file_info.getCPtr(p_info), p_info);
  }

  public boolean get_info_locked(file_info p_info) {
    return foobarJNI.metadb_handle_get_info_locked(swigCPtr, this, file_info.getCPtr(p_info));
  }

  public boolean is_info_loaded_async() {
    return foobarJNI.metadb_handle_is_info_loaded_async(swigCPtr, this);
  }

  public boolean get_info_async(file_info p_info) {
    return foobarJNI.metadb_handle_get_info_async(swigCPtr, this, file_info.getCPtr(p_info), p_info);
  }

  public boolean get_info_async_locked(file_info p_info) {
    return foobarJNI.metadb_handle_get_info_async_locked(swigCPtr, this, file_info.getCPtr(p_info));
  }

  public static boolean g_should_reload(t_filestats p_old_stats, t_filestats p_new_stats, boolean p_fresh) {
    return foobarJNI.metadb_handle_g_should_reload(t_filestats.getCPtr(p_old_stats), p_old_stats, t_filestats.getCPtr(p_new_stats), p_new_stats, p_fresh);
  }

  public boolean should_reload(t_filestats p_new_stats, boolean p_fresh) {
    return foobarJNI.metadb_handle_should_reload(swigCPtr, this, t_filestats.getCPtr(p_new_stats), p_new_stats, p_fresh);
  }

  public String get_path() {
    return foobarJNI.metadb_handle_get_path(swigCPtr, this);
  }

  public long get_subsong_index() {
    return foobarJNI.metadb_handle_get_subsong_index(swigCPtr, this);
  }

  public double get_length() {
    return foobarJNI.metadb_handle_get_length(swigCPtr, this);
  }

  public java.math.BigInteger get_filetimestamp() {
    return foobarJNI.metadb_handle_get_filetimestamp(swigCPtr, this);
  }

  public java.math.BigInteger get_filesize() {
    return foobarJNI.metadb_handle_get_filesize(swigCPtr, this);
  }

}
