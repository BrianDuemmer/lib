/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.foobar2000.api;

public class metadb_io {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public metadb_io(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(metadb_io obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
  }

  public void test2(PfcString out) {
    foobarJNI.metadb_io_test2(swigCPtr, this, out);
  }

  public boolean is_busy() {
    return foobarJNI.metadb_io_is_busy(swigCPtr, this);
  }

  public boolean is_updating_disabled() {
    return foobarJNI.metadb_io_is_updating_disabled(swigCPtr, this);
  }

  public boolean is_file_updating_blocked() {
    return foobarJNI.metadb_io_is_file_updating_blocked(swigCPtr, this);
  }

  public void highlight_running_process() {
    foobarJNI.metadb_io_highlight_running_process(swigCPtr, this);
  }

  public metadb_io.t_load_info_state load_info_multi(java.util.Vector<metadb_handle> p_list, metadb_io.t_load_info_type p_type, int p_parent_window, boolean p_show_errors) {
    return metadb_io.t_load_info_state.swigToEnum(foobarJNI.metadb_io_load_info_multi(swigCPtr, this, p_list, p_type.swigValue(), p_parent_window, p_show_errors));
  }

  public metadb_io.t_update_info_state update_info_multi(java.util.Vector<metadb_handle> p_list, java.util.Vector<file_info> p_new_info, int p_parent_window, boolean p_show_errors) {
    return metadb_io.t_update_info_state.swigToEnum(foobarJNI.metadb_io_update_info_multi(swigCPtr, this, p_list, p_new_info, p_parent_window, p_show_errors));
  }

  public metadb_io.t_update_info_state rewrite_info_multi(java.util.Vector<metadb_handle> p_list, int p_parent_window, boolean p_show_errors) {
    return metadb_io.t_update_info_state.swigToEnum(foobarJNI.metadb_io_rewrite_info_multi(swigCPtr, this, p_list, p_parent_window, p_show_errors));
  }

  public metadb_io.t_update_info_state remove_info_multi(java.util.Vector<metadb_handle> p_list, int p_parent_window, boolean p_show_errors) {
    return metadb_io.t_update_info_state.swigToEnum(foobarJNI.metadb_io_remove_info_multi(swigCPtr, this, p_list, p_parent_window, p_show_errors));
  }

  public void hint_multi(java.util.Vector<metadb_handle> p_list, java.util.Vector<file_info> p_infos, java.util.Vector<t_filestats> p_stats, bit_array p_fresh_mask) {
    foobarJNI.metadb_io_hint_multi(swigCPtr, this, p_list, p_infos, p_stats, bit_array.getCPtr(p_fresh_mask), p_fresh_mask);
  }

  public void hint_multi_async(java.util.Vector<metadb_handle> p_list, java.util.Vector<file_info> p_infos, java.util.Vector<t_filestats> p_stats, bit_array p_fresh_mask) {
    foobarJNI.metadb_io_hint_multi_async(swigCPtr, this, p_list, p_infos, p_stats, bit_array.getCPtr(p_fresh_mask), p_fresh_mask);
  }

  public void dispatch_refresh(java.util.Vector<metadb_handle> p_list) {
    foobarJNI.metadb_io_dispatch_refresh(swigCPtr, this, p_list);
  }

  public void hint_async(metadb_handle p_item, file_info p_info, t_filestats p_stats, boolean p_fresh) {
    foobarJNI.metadb_io_hint_async(swigCPtr, this, metadb_handle.getCPtr(p_item), p_item, file_info.getCPtr(p_info), p_info, t_filestats.getCPtr(p_stats), p_stats, p_fresh);
  }

  public metadb_io.t_load_info_state load_info(metadb_handle p_item, metadb_io.t_load_info_type p_type, int p_parent_window, boolean p_show_errors) {
    return metadb_io.t_load_info_state.swigToEnum(foobarJNI.metadb_io_load_info(swigCPtr, this, metadb_handle.getCPtr(p_item), p_item, p_type.swigValue(), p_parent_window, p_show_errors));
  }

  public metadb_io.t_update_info_state update_info(metadb_handle p_item, file_info p_info, int p_parent_window, boolean p_show_errors) {
    return metadb_io.t_update_info_state.swigToEnum(foobarJNI.metadb_io_update_info(swigCPtr, this, metadb_handle.getCPtr(p_item), p_item, file_info.getCPtr(p_info), p_info, p_parent_window, p_show_errors));
  }

  public final static class t_load_info_type {
    public final static t_load_info_type load_info_default = new t_load_info_type("load_info_default");
    public final static t_load_info_type load_info_force = new t_load_info_type("load_info_force");
    public final static t_load_info_type load_info_check_if_changed = new t_load_info_type("load_info_check_if_changed");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static t_load_info_type swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + t_load_info_type.class + " with value " + swigValue);
    }

    private t_load_info_type(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private t_load_info_type(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private t_load_info_type(String swigName, t_load_info_type swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static t_load_info_type[] swigValues = { load_info_default, load_info_force, load_info_check_if_changed };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class t_update_info_state {
    public final static t_update_info_state update_info_success = new t_update_info_state("update_info_success");
    public final static t_update_info_state update_info_aborted = new t_update_info_state("update_info_aborted");
    public final static t_update_info_state update_info_errors = new t_update_info_state("update_info_errors");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static t_update_info_state swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + t_update_info_state.class + " with value " + swigValue);
    }

    private t_update_info_state(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private t_update_info_state(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private t_update_info_state(String swigName, t_update_info_state swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static t_update_info_state[] swigValues = { update_info_success, update_info_aborted, update_info_errors };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class t_load_info_state {
    public final static t_load_info_state load_info_success = new t_load_info_state("load_info_success");
    public final static t_load_info_state load_info_aborted = new t_load_info_state("load_info_aborted");
    public final static t_load_info_state load_info_errors = new t_load_info_state("load_info_errors");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static t_load_info_state swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + t_load_info_state.class + " with value " + swigValue);
    }

    private t_load_info_state(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private t_load_info_state(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private t_load_info_state(String swigName, t_load_info_state swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static t_load_info_state[] swigValues = { load_info_success, load_info_aborted, load_info_errors };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
