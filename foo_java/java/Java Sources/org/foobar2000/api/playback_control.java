/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package org.foobar2000.api;

public class playback_control {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public playback_control(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(playback_control obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  public synchronized void delete() {
    if(swigCPtr != 0 && swigCMemOwn) {
      swigCMemOwn = false;
      throw new UnsupportedOperationException("C++ destructor does not have public access");
    }
    swigCPtr = 0;
  }

  public boolean get_now_playing(metadb_handle p_out) {
    return foobarJNI.playback_control_get_now_playing(swigCPtr, this, metadb_handle.getCPtr(p_out));
  }

  public void start(playback_control.t_track_command p_command, boolean p_paused) {
    foobarJNI.playback_control_start__SWIG_0(swigCPtr, this, p_command.swigValue(), p_paused);
  }

  public void start(playback_control.t_track_command p_command) {
    foobarJNI.playback_control_start__SWIG_1(swigCPtr, this, p_command.swigValue());
  }

  public void start() {
    foobarJNI.playback_control_start__SWIG_2(swigCPtr, this);
  }

  public void stop() {
    foobarJNI.playback_control_stop(swigCPtr, this);
  }

  public boolean is_playing() {
    return foobarJNI.playback_control_is_playing(swigCPtr, this);
  }

  public boolean is_paused() {
    return foobarJNI.playback_control_is_paused(swigCPtr, this);
  }

  public void pause(boolean p_state) {
    foobarJNI.playback_control_pause(swigCPtr, this, p_state);
  }

  public boolean get_stop_after_current() {
    return foobarJNI.playback_control_get_stop_after_current(swigCPtr, this);
  }

  public void set_stop_after_current(boolean p_state) {
    foobarJNI.playback_control_set_stop_after_current(swigCPtr, this, p_state);
  }

  public void set_volume(float p_value) {
    foobarJNI.playback_control_set_volume(swigCPtr, this, p_value);
  }

  public float get_volume() {
    return foobarJNI.playback_control_get_volume(swigCPtr, this);
  }

  public void volume_up() {
    foobarJNI.playback_control_volume_up(swigCPtr, this);
  }

  public void volume_down() {
    foobarJNI.playback_control_volume_down(swigCPtr, this);
  }

  public void volume_mute_toggle() {
    foobarJNI.playback_control_volume_mute_toggle(swigCPtr, this);
  }

  public void playback_seek(double p_time) {
    foobarJNI.playback_control_playback_seek(swigCPtr, this, p_time);
  }

  public void playback_seek_delta(double p_delta) {
    foobarJNI.playback_control_playback_seek_delta(swigCPtr, this, p_delta);
  }

  public boolean playback_can_seek() {
    return foobarJNI.playback_control_playback_can_seek(swigCPtr, this);
  }

  public double playback_get_position() {
    return foobarJNI.playback_control_playback_get_position(swigCPtr, this);
  }

  public double playback_get_length() {
    return foobarJNI.playback_control_playback_get_length(swigCPtr, this);
  }

  public void toggle_stop_after_current() {
    foobarJNI.playback_control_toggle_stop_after_current(swigCPtr, this);
  }

  public void toggle_pause() {
    foobarJNI.playback_control_toggle_pause(swigCPtr, this);
  }

  public void play_or_pause() {
    foobarJNI.playback_control_play_or_pause(swigCPtr, this);
  }

  public final static class t_stop_reason {
    public final static t_stop_reason stop_reason_user = new t_stop_reason("stop_reason_user", foobarJNI.playback_control_stop_reason_user_get());
    public final static t_stop_reason stop_reason_eof = new t_stop_reason("stop_reason_eof");
    public final static t_stop_reason stop_reason_starting_another = new t_stop_reason("stop_reason_starting_another");
    public final static t_stop_reason stop_reason_shutting_down = new t_stop_reason("stop_reason_shutting_down");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static t_stop_reason swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + t_stop_reason.class + " with value " + swigValue);
    }

    private t_stop_reason(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private t_stop_reason(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private t_stop_reason(String swigName, t_stop_reason swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static t_stop_reason[] swigValues = { stop_reason_user, stop_reason_eof, stop_reason_starting_another, stop_reason_shutting_down };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class t_track_command {
    public final static t_track_command track_command_default = new t_track_command("track_command_default", foobarJNI.playback_control_track_command_default_get());
    public final static t_track_command track_command_play = new t_track_command("track_command_play");
    public final static t_track_command track_command_next = new t_track_command("track_command_next");
    public final static t_track_command track_command_prev = new t_track_command("track_command_prev");
    public final static t_track_command track_command_settrack = new t_track_command("track_command_settrack");
    public final static t_track_command track_command_rand = new t_track_command("track_command_rand");
    public final static t_track_command track_command_resume = new t_track_command("track_command_resume");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static t_track_command swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + t_track_command.class + " with value " + swigValue);
    }

    private t_track_command(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private t_track_command(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private t_track_command(String swigName, t_track_command swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static t_track_command[] swigValues = { track_command_default, track_command_play, track_command_next, track_command_prev, track_command_settrack, track_command_rand, track_command_resume };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class t_display_level {
    public final static t_display_level display_level_none = new t_display_level("display_level_none");
    public final static t_display_level display_level_basic = new t_display_level("display_level_basic");
    public final static t_display_level display_level_titles = new t_display_level("display_level_titles");
    public final static t_display_level display_level_all = new t_display_level("display_level_all");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static t_display_level swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + t_display_level.class + " with value " + swigValue);
    }

    private t_display_level(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private t_display_level(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private t_display_level(String swigName, t_display_level swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static t_display_level[] swigValues = { display_level_none, display_level_basic, display_level_titles, display_level_all };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
